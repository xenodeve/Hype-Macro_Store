// Random Video Background - ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏∏‡πà‡∏°
        const videoUrls = [
            'https://ik.imagekit.io/xenodev/Mini%20Project/Home%20Bg/ik-video.mp4?updatedAt=1756063825420',
            'https://ik.imagekit.io/xenodev/Mini%20Project/Home%20bg%202/ik-video.mp4?updatedAt=1756064429930'
        ];

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
        function setRandomVideo() {
            const randomIndex = Math.floor(Math.random() * videoUrls.length); // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
            const videoSource = document.getElementById('video-source'); // ‡∏´‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö video source
            const heroVideo = document.getElementById('hero-video'); // ‡∏´‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö video

            videoSource.src = videoUrls[randomIndex]; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ URL ‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
            heroVideo.load(); // ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏´‡∏°‡πà
        }

        // Theme Toggle Functionality - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ò‡∏µ‡∏°
        const storageKey = 'theme-preference' // ‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏°‡πÉ‡∏ô localStorage

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ò‡∏µ‡∏°
        const onClick = () => {
            theme.value = theme.value === 'light' ? 'dark' : 'light' // ‡∏™‡∏•‡∏±‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏∑‡∏î
            setPreference() // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏°
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        const getColorPreference = () => {
            if (localStorage.getItem(storageKey)) // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô localStorage
                return localStorage.getItem(storageKey) // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
            else // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
                return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light' // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£
        const initializeTheme = () => {
            const preferredTheme = getColorPreference() // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            theme.value = preferredTheme // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏°

            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ data-theme attribute ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            document.documentElement.setAttribute('data-theme', preferredTheme)

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏ö dark class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Tailwind
            if (preferredTheme === 'dark') {
                document.documentElement.classList.add('dark')
            } else {
                document.documentElement.classList.remove('dark')
            }

            console.log(`üåô Theme initialized: ${preferredTheme}`) // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏°
        const setPreference = () => {
            localStorage.setItem(storageKey, theme.value) // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏•‡∏á localStorage
            reflectPreference() // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏ï‡∏≤‡∏°‡∏ò‡∏µ‡∏°
        const reflectPreference = () => {
            document.firstElementChild.setAttribute('data-theme', theme.value) // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ attribute ‡∏ò‡∏µ‡∏°
            document.querySelector('#theme-toggle')?.setAttribute('aria-label', theme.value) // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï aria-label

            // Toggle Tailwind dark class - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™ dark ‡∏Ç‡∏≠‡∏á Tailwind
            if (theme.value === 'dark') { // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏°‡∏∑‡∏î
                document.documentElement.classList.add('dark') // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏•‡∏≤‡∏™ dark
            } else { // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏ß‡πà‡∏≤‡∏á
                document.documentElement.classList.remove('dark') // ‡∏•‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™ dark
            }
        }

        // ‡∏≠‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏°
        const theme = {
            value: getColorPreference(), // ‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        }

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ò‡∏µ‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÇ‡∏´‡∏•‡∏î
        initializeTheme() // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ò‡∏µ‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£

        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
        window.onload = () => {
            setRandomVideo() // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            reflectPreference() // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ò‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
            document.querySelector('#theme-toggle').addEventListener('click', onClick) // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°
        }

        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', ({ matches: isDark }) => {
            theme.value = isDark ? 'dark' : 'light' // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏°
            setPreference() // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
        })

        // Mobile Menu Toggle
        const mobileMenuButton = document.getElementById('mobile-menu-button')
        const mobileMenu = document.getElementById('mobile-menu')

        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠
        mobileMenuButton.addEventListener('click', () => {
            mobileMenu.classList.toggle('hidden') // ‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏ô/‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π
        })

        // Smooth Navigation - ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö
        function setupSmoothNavigation() {
            // ‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ href ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ #
            const navLinks = document.querySelectorAll('a[href^="#"]')

            navLinks.forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault() // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå

                    const targetId = link.getAttribute('href').substring(1) // ‡∏ï‡∏±‡∏î # ‡∏≠‡∏≠‡∏Å
                    const targetSection = document.getElementById(targetId)

                    if (targetSection) {
                        // ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
                        if (!mobileMenu.classList.contains('hidden')) {
                            mobileMenu.classList.add('hidden')
                        }

                        // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                        targetSection.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        })

                        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï URL ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
                        window.history.pushState(null, null, `#${targetId}`)
                    }
                })
            })
        }

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
        setupSmoothNavigation()

        // Video Carousel - ‡∏Ñ‡∏≤‡∏£‡πå‡∏£‡∏π‡πÄ‡∏ã‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
        let currentVideo = 0 // ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const videoCarousel = document.getElementById('videoCarousel') // ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏Ñ‡∏≤‡∏£‡πå‡∏£‡∏π‡πÄ‡∏ã‡∏•
        const prevBtn = document.getElementById('prevVideo') // ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
        const nextBtn = document.getElementById('nextVideo') // ‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        const maxVideos = 4 // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        let autoPlayInterval // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö interval ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        let isUserInteracting = false // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        let autoPlayPermanentlyStopped = false // ‡πÅ‡∏ü‡∏•‡πá‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ñ‡∏≤‡∏ß‡∏£

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏≤‡∏£‡πå‡∏£‡∏π‡πÄ‡∏ã‡∏•
        function updateCarousel() {
            const translateX = currentVideo * -476 // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô (29.75rem = 476px) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏≤‡∏Å https://nekocalc.com/px-to-rem-converter
            videoCarousel.style.transform = `translateX(${translateX}px)` // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏≤‡∏£‡πå‡∏£‡∏π‡πÄ‡∏ã‡∏•
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        function startAutoPlay() {
            // ‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡∏ñ‡∏≤‡∏ß‡∏£‡πÅ‡∏•‡πâ‡∏ß
            if (autoPlayPermanentlyStopped) {
                return
            }

            // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            autoPlayInterval = setInterval(() => {
                if (!isUserInteracting && !autoPlayPermanentlyStopped) { // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏ñ‡∏≤‡∏ß‡∏£
                    currentVideo = (currentVideo + 1) % maxVideos // ‡πÑ‡∏õ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                    updateCarousel() // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≤‡∏£‡πå‡∏£‡∏π‡πÄ‡∏ã‡∏•
                }
            }, 10000)
        }

        function stopAutoPlay() {
            if (autoPlayInterval) {
                clearInterval(autoPlayInterval)
            }
        }

        function permanentlyStopAutoPlay() {
            autoPlayPermanentlyStopped = true
            stopAutoPlay()
        }

        // Manual navigation controls
        prevBtn.addEventListener('click', () => {
            currentVideo = currentVideo === 0 ? maxVideos - 1 : currentVideo - 1
            updateCarousel()
            // Reset auto-play timer when user manually navigates
            stopAutoPlay()
            setTimeout(startAutoPlay, 1800000) // ‡πÄ‡∏£‡∏¥‡πà‡∏° auto-play ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ
        })

        nextBtn.addEventListener('click', () => {
            currentVideo = currentVideo === maxVideos - 1 ? 0 : currentVideo + 1
            updateCarousel()
            // Reset auto-play timer when user manually navigates
            stopAutoPlay()
            setTimeout(startAutoPlay, 1800000) // ‡πÄ‡∏£‡∏¥‡πà‡∏° auto-play ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ
        })

        // Detect when user is interacting with YouTube videos
        const videoContainers = document.querySelectorAll('.video-item')
        videoContainers.forEach(container => {
            const iframe = container.querySelector('iframe')

            // ‡∏´‡∏¢‡∏∏‡∏î auto-play ‡πÄ‡∏°‡∏∑‡πà‡∏≠ user ‡∏ô‡∏≥ cursor ‡πÑ‡∏õ‡∏ä‡∏µ‡πâ‡∏ó‡∏µ‡πà video
            container.addEventListener('mouseenter', () => {
                isUserInteracting = true
            })

            // Resume auto-play when user leaves video area (only if not permanently stopped)
            container.addEventListener('mouseleave', () => {
                setTimeout(() => {
                    isUserInteracting = false
                }, 2000) // Wait 2 seconds before resuming
            })

            // Permanently stop auto-play when user clicks on video area
            container.addEventListener('click', () => {
                permanentlyStopAutoPlay() // Stop permanently instead of temporarily
            })
        })

        // Listen for YouTube player events using postMessage API
        window.addEventListener('message', function (event) {
            // Check if message is from YouTube
            if (event.origin !== 'https://www.youtube.com') {
                return
            }

            try {
                const data = JSON.parse(event.data)

                // YouTube player state changed
                if (data.event === 'video-progress' || data.event === 'onStateChange') {
                    // Player states: -1 (unstarted), 0 (ended), 1 (playing), 2 (paused), 3 (buffering), 5 (cued)
                    if (data.info && data.info.playerState !== undefined) {
                        const playerState = data.info.playerState

                        if (playerState === 1) { // Video is playing
                            permanentlyStopAutoPlay() // Stop auto-play permanently when user plays video
                        }
                    }
                }
            } catch (e) {
                // Ignore parsing errors
            }
        })

        // Enable YouTube iframe API for all videos
        const iframes = document.querySelectorAll('.video-item iframe')
        iframes.forEach(iframe => {
            const src = iframe.src
            // Add enablejsapi parameter if not already present
            if (src && !src.includes('enablejsapi=1')) {
                const separator = src.includes('?') ? '&' : '?'
                iframe.src = src + separator + 'enablejsapi=1&origin=' + encodeURIComponent(window.location.origin)
            }
        })

        // Start auto-play initially
        startAutoPlay()

        // Product Cards Animation (Static Grid Layout)
        // Add smooth hover animations and interactions for product cards
        const productCards = document.querySelectorAll('#products .group')
        productCards.forEach((card, index) => {
            // Add staggered entrance animation
            card.style.opacity = '0'
            card.style.transform = 'translateY(20px)'

            setTimeout(() => {
                card.style.transition = 'all 0.6s ease-out'
                card.style.opacity = '1'
                card.style.transform = 'translateY(0)'
            }, 200 * (index + 1))

            // Enhanced hover effects
            card.addEventListener('mouseenter', () => {
                card.style.transform = 'translateY(-10px) scale(1.02)'
            })

            card.addEventListener('mouseleave', () => {
                card.style.transform = 'translateY(0) scale(1)'
            })
        })

        // Intersection Observer for product cards animation on scroll
        const productObserver = new IntersectionObserver((entries) => {
            entries.forEach((entry, index) => {
                if (entry.isIntersecting) {
                    setTimeout(() => {
                        entry.target.classList.add('animate-fade-in')
                    }, 100 * index)
                }
            })
        }, { threshold: 0.1 })

        // Observe product cards
        productCards.forEach(card => {
            productObserver.observe(card)
        })

        // Smooth animations for hero section
        window.addEventListener('load', () => {
            setTimeout(() => {
                document.getElementById('hero-title').style.opacity = '1'
                document.getElementById('hero-title').style.transform = 'translateY(0)'
            }, 500)

            setTimeout(() => {
                document.getElementById('hero-subtitle').style.opacity = '1'
                document.getElementById('hero-subtitle').style.transform = 'translateY(0)'
            }, 1000)

            setTimeout(() => {
                document.getElementById('hero-cta').style.opacity = '1'
                document.getElementById('hero-cta').style.transform = 'translateY(0)'
            }, 1500)
        })

        // Intersection Observer for animations
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        }

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('animate-fade-in')
                }
            })
        }, observerOptions)

        // Observe all feature sections
        document.querySelectorAll('#features > div > div').forEach(el => {
            observer.observe(el)
        })